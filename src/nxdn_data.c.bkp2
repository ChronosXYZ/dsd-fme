#include "dsd.h"
#include "nxdn_const.h" //test making this just like voice, but not processing MBEframes

void
processNXDNData (dsd_opts * opts, dsd_state * state)
{
  int i, j, dibit, k, l;
  char ambe_fr2[4][24];
  const int *w, *x, *y, *z;
  const char *pr;

  if (opts->errorbars == 1)
    {
      fprintf (stderr,"DATA e:");
    }

  for (i = 0; i < 30; i++)
    {
      dibit = getDibit (opts, state);
#ifdef NXDN_DUMP
      fprintf (stderr,"%c", dibit + 48);
#endif
    }
#ifdef NXDN_DUMP
  fprintf (stderr," ");
#endif

  pr = nxdnpr;
  for (j = 0; j < 4; j++)
    {
      w = nW;
      x = nX;
      y = nY;
      z = nZ;
      for (i = 0; i < 36; i++)
        {
          dibit = getDibit (opts, state);
          //fprintf (stderr,"%c", dibit + 48); //remove later
#ifdef NXDN_DUMP
          fprintf (stderr,"%c", dibit + 48);
#endif
          ambe_fr2[*w][*x] = *pr ^ (1 & (dibit >> 1));   // bit 1
          pr++;
          ambe_fr2[*y][*z] = (1 & dibit);        // bit 0
          w++;
          x++;
          y++;
          z++;
          //dump this whole lot, figure out what it all means
          //fprintf (stderr, "%s\n%s\n", ambe_fr, pr);
        }
        for (k = 0; k < 36; k++) //was 36
          {
            for (l = 0; l < 36; l++) //was 36
              {
                //fprintf (stderr, "%X%X", ambe_fr[k][l]);
                //fprintf (stderr, "%X", ambe_fr2[k][l]);
              }
              //fprintf (stderr, "\n");
          }
      //processMbeFrame (opts, state, NULL, ambe_fr, NULL);
#ifdef NXDN_DUMP
      fprintf (stderr," ");
#endif

    }
  //fprintf (stderr, "\nD%s\n%s\n", ambe_fr, pr);
  if (opts->errorbars == 1)
    {
      fprintf (stderr,"\n");
    }
}
